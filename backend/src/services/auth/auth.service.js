// src/services/authService.js
const argon2 = require("argon2");
const jwt = require("jsonwebtoken");
const userDao = require("@dao/users/users");

const JWT_SECRET = process.env.JWT_SECRET || "yourSecretKey";

/**
 * Hashes a given password using Argon2.
 *
 * @param {string} password - The password to hash.
 *
 * @returns {Promise<string>} The hashed password.
 */
async function hashPassword(password) {
  return await argon2.hash(password);
}

/**
 * Verifies a given password against a hash generated by argon2.
 *
 * @param {string} password - The password to verify.
 * @param {string} hash - The hash to verify against.
 *
 * @returns {Promise<boolean>} - true if the password matches, false otherwise.
 */
async function verifyPassword(password, hash) {
  return await argon2.verify(hash, password);
}

/**
 * Generates a JSON Web Token (JWT) for a given user.
 *
 * @param {object} user - The user object containing at least the user's id and email.
 * @returns {string} The generated JWT, signed with a secret and set to expire in 1 hour.
 */
async function generateToken(user) {
  return jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, {
    expiresIn: "24h",
  });
}

/**
 * Checks if a password is strong based on predefined criteria.
 * A strong password must be at least 8 characters long and contain
 * at least one uppercase letter, one lowercase letter, and one number.
 *
 * @param {string} password - The password to validate.
 * @returns {boolean} true if the password is strong, false otherwise.
 */
function isPasswordStrong(password) {
  const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
  return regex.test(password);
}

/**
 * Registers a new user by hashing the given password and creating a new entry in the database
 * @param {object} user - An object with the following fields: firstName, lastName, email, password
 * @returns {object} The newly created user
 * @throws if the user object is invalid
 */
async function registerUser(user) {
  // check if Password is strong enough
  if (!isPasswordStrong(user.password)) {
    throw new Error(
      "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number"
    );
  }
  user.password = await hashPassword(user.password);
  const newUser = await userDao.create(user);
  return newUser;
}

/**
 * Authenticates a user by their email and password, and returns a JWT token to access restricted routes.
 * @param {string} email - The user's email.
 * @param {string} password - The user's password.
 * @returns {object} An object with the following fields: user, token.
 * @throws if the email or password is invalid
 */
async function authenticateUser(email, password) {
  try {
    const users = await userDao.findByEmail(email);
    const user = users[0];
    if (user && (await verifyPassword(password, user.password))) {
      const token = await generateToken(user);
      return { user, token };
    }
    throw new Error("Invalid email or password");
  } catch (error) {
    throw new Error(error.message);
  }
}

/**
 * Finds or creates a user by their GoogleId, email, firstName, and lastName.
 * If the user already exists, return the existing user.
 * If the user does not exist, create a new user with the given information.
 * @param {object} user - An object with the following fields: googleId, email, firstName, lastName.
 * @returns {object} The user object.
 */
async function findOrCreateUser({ id, email, firstName, lastName }) {
  try {
    const newUser = await userDao.create({
      id,
      email,
      firstName,
      lastName,
      lastLocation: "",
      password: "",
    });
    return newUser;
  } catch (error) {
    return await userDao.findByEmail(email);
  }
}

module.exports = {
  registerUser,
  authenticateUser,
  generateToken,
  findOrCreateUser,
  verifyPassword,
};
